# Generated by Django 5.2.4 on 2025-08-20 14:09

import django.db.models.deletion
from django.db import migrations, models


def migrate_zone_servers_forward(apps, schema_editor):
    """Migrate data from old model structure to new ZoneServer model"""
    Zone = apps.get_model('manager', 'Zone')
    ZoneServer = apps.get_model('manager', 'ZoneServer')

    # Skip if we're dealing with a fresh database
    if not Zone.objects.exists():
        return

    # Use raw SQL to check if old columns exist (for fresh installs)
    from django.db import connection
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT column_name
            FROM information_schema.columns
            WHERE table_name = 'manager_zone'
            AND column_name IN ('master_server_id', 'content_dirty', 'master_config_dirty')
        """)
        columns = [row[0] for row in cursor.fetchall()]

        if not columns:
            # Fresh install, no need to migrate
            return

    # Migrate master servers
    for zone in Zone.objects.all():
        if hasattr(zone, 'master_server_id') and zone.master_server_id:
            # Create master ZoneServer entry
            ZoneServer.objects.create(
                zone=zone,
                server_id=zone.master_server_id,
                role='master',
                content_dirty=getattr(zone, 'content_dirty', False),
                content_dirty_since=getattr(zone, 'content_dirty_since', None),
                config_dirty=getattr(zone, 'master_config_dirty', False),
                config_dirty_since=getattr(zone, 'master_config_dirty_since', None)
            )

    # Migrate slave servers
    if hasattr(Zone, 'slave_servers'):
        for zone in Zone.objects.prefetch_related('slave_servers'):
            for slave_server in zone.slave_servers.all():
                # Create slave ZoneServer entry
                ZoneServer.objects.create(
                    zone=zone,
                    server=slave_server,
                    role='slave',
                    content_dirty=False,  # Slaves don't have content_dirty
                    content_dirty_since=None,
                    config_dirty=True,  # Default to needing sync
                    config_dirty_since=None
                )

    # Migrate ZoneServerStatus data if it exists
    try:
        ZoneServerStatus = apps.get_model('manager', 'ZoneServerStatus')
        for status in ZoneServerStatus.objects.select_related('zone', 'server'):
            try:
                zone_server = ZoneServer.objects.get(
                    zone=status.zone,
                    server=status.server
                )
                if status.config_dirty is not None:
                    zone_server.config_dirty = status.config_dirty
                if status.config_dirty_since:
                    zone_server.config_dirty_since = status.config_dirty_since
                if status.last_sync_time:
                    zone_server.last_sync_time = status.last_sync_time
                zone_server.save()
            except ZoneServer.DoesNotExist:
                # Create a new entry if it doesn't exist
                ZoneServer.objects.create(
                    zone=status.zone,
                    server=status.server,
                    role='slave',  # Assume slave if not master
                    config_dirty=status.config_dirty,
                    config_dirty_since=status.config_dirty_since,
                    last_sync_time=status.last_sync_time
                )
    except LookupError:
        # ZoneServerStatus model doesn't exist yet
        pass


def migrate_zone_servers_reverse(apps, schema_editor):
    """Reverse migration - restore data to old model structure"""
    # This is a destructive migration, we can't fully reverse it
    # Just clear the ZoneServer table
    ZoneServer = apps.get_model('manager', 'ZoneServer')
    ZoneServer.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("manager", "0001_initial"),
    ]

    operations = [
        # First, create the new ZoneServer model
        migrations.CreateModel(
            name="ZoneServer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "role",
                    models.CharField(
                        choices=[("master", "Master"), ("slave", "Slave")],
                        help_text="Role of this server for the zone",
                        max_length=10,
                    ),
                ),
                (
                    "config_dirty",
                    models.BooleanField(default=False, help_text="Server configuration for this zone needs update"),
                ),
                (
                    "config_dirty_since",
                    models.DateTimeField(blank=True, help_text="When config was marked dirty", null=True),
                ),
                (
                    "content_dirty",
                    models.BooleanField(
                        default=False, help_text="Zone content needs to be synchronized (master servers only)"
                    ),
                ),
                (
                    "content_dirty_since",
                    models.DateTimeField(
                        blank=True, help_text="When content was marked dirty (master servers only)", null=True
                    ),
                ),
                (
                    "last_sync_time",
                    models.DateTimeField(blank=True, help_text="Last successful synchronization time", null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "server",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="zone_servers", to="manager.server"
                    ),
                ),
                (
                    "zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="zone_servers", to="manager.zone"
                    ),
                ),
            ],
            options={
                "verbose_name": "Zone Server",
                "verbose_name_plural": "Zone Servers",
                "unique_together": {("zone", "server", "role")},
            },
        ),

        # Run the data migration
        migrations.RunPython(
            migrate_zone_servers_forward,
            migrate_zone_servers_reverse,
        ),

        # Remove SlaveOnlyZoneServerStatus dependencies
        migrations.RemoveField(
            model_name="slaveonlyzoneserverstatus",
            name="zone",
        ),
        migrations.AlterUniqueTogether(
            name="slaveonlyzoneserverstatus",
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name="slaveonlyzoneserverstatus",
            name="server",
        ),

        # Remove ZoneServerStatus dependencies
        migrations.AlterUniqueTogether(
            name="zoneserverstatus",
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name="zoneserverstatus",
            name="server",
        ),
        migrations.RemoveField(
            model_name="zoneserverstatus",
            name="zone",
        ),

        # Remove fields from Zone
        migrations.RemoveField(
            model_name="zone",
            name="master_config_dirty",
        ),
        migrations.RemoveField(
            model_name="zone",
            name="master_config_dirty_since",
        ),
        migrations.RemoveField(
            model_name="zone",
            name="master_server",
        ),
        migrations.RemoveField(
            model_name="zone",
            name="slave_servers",
        ),

        # Delete the old models
        migrations.DeleteModel(
            name="SlaveOnlyZone",
        ),
        migrations.DeleteModel(
            name="SlaveOnlyZoneServerStatus",
        ),
        migrations.DeleteModel(
            name="ZoneServerStatus",
        ),
    ]

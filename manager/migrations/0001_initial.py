# Generated by Django 5.2.4 on 2025-08-09 09:53

import django.db.models.deletion
import django.utils.timezone
import manager.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Server",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, unique=True)),
                ("api_url", models.URLField(help_text="API endpoint URL for the DNS server", max_length=500)),
                ("api_key", models.CharField(help_text="API authentication key", max_length=255)),
                ("master_template", models.CharField(help_text="Template name for master zones", max_length=100)),
                ("slave_template", models.CharField(help_text="Template name for slave zones", max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "DNS Server",
                "verbose_name_plural": "DNS Servers",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SlaveOnlyZone",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "origin",
                    models.CharField(
                        help_text="Zone origin (e.g., example.com.)",
                        max_length=255,
                        unique=True,
                        validators=[manager.models.validate_origin],
                    ),
                ),
                (
                    "external_master",
                    models.CharField(
                        help_text="External master server hostname or IP address",
                        max_length=255,
                        validators=[manager.models.validate_dns_hostname],
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="slave_only_zones", to="auth.group"
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="owned_slave_only_zones",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "slave_servers",
                    models.ManyToManyField(
                        help_text="Slave DNS servers for this zone",
                        related_name="slave_only_zones",
                        to="manager.server",
                    ),
                ),
            ],
            options={
                "verbose_name": "Slave Only Zone",
                "verbose_name_plural": "Slave Only Zones",
                "ordering": ["origin"],
                "permissions": [("sync_slave_only_zone", "Can synchronize slave only zone to DNS server")],
            },
        ),
        migrations.CreateModel(
            name="Zone",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "origin",
                    models.CharField(
                        help_text="Zone origin (e.g., example.com.)",
                        max_length=255,
                        unique=True,
                        validators=[manager.models.validate_origin],
                    ),
                ),
                (
                    "content_dirty",
                    models.BooleanField(
                        default=False,
                        help_text="Zone content (resource records) has pending changes that need to be synchronized",
                    ),
                ),
                (
                    "content_dirty_since",
                    models.DateTimeField(blank=True, help_text="When content was marked dirty", null=True),
                ),
                (
                    "master_config_dirty",
                    models.BooleanField(
                        default=False, help_text="Master server configuration has changed and needs reload"
                    ),
                ),
                (
                    "master_config_dirty_since",
                    models.DateTimeField(blank=True, help_text="When master config was marked dirty", null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="zones", to="auth.group"
                    ),
                ),
                (
                    "master_server",
                    models.ForeignKey(
                        help_text="Primary DNS server hosting this zone",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="master_zones",
                        to="manager.server",
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="owned_zones",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "slave_servers",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Secondary DNS servers for this zone",
                        related_name="slave_zones",
                        to="manager.server",
                    ),
                ),
            ],
            options={
                "verbose_name": "DNS Zone",
                "verbose_name_plural": "DNS Zones",
                "ordering": ["origin"],
                "permissions": [("sync_zone", "Can synchronize zone to DNS server")],
            },
        ),
        migrations.CreateModel(
            name="TXT",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "label",
                    models.CharField(
                        help_text="Record label (e.g., www, @, or subdomain)",
                        max_length=255,
                        validators=[manager.models.validate_rr_label],
                    ),
                ),
                ("ttl", models.PositiveIntegerField(default=3600, help_text="Time to live in seconds")),
                ("rrclass", models.CharField(choices=[("IN", "IN")], db_column="class", default="IN", max_length=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("value", models.TextField(help_text="Text content")),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="auth.group")),
                ("owner", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ("zone", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="manager.zone")),
            ],
            options={
                "verbose_name": "TXT Record",
                "verbose_name_plural": "TXT Records",
            },
        ),
        migrations.CreateModel(
            name="TLSA",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "label",
                    models.CharField(
                        help_text="Record label (e.g., www, @, or subdomain)",
                        max_length=255,
                        validators=[manager.models.validate_rr_label],
                    ),
                ),
                ("ttl", models.PositiveIntegerField(default=3600, help_text="Time to live in seconds")),
                ("rrclass", models.CharField(choices=[("IN", "IN")], db_column="class", default="IN", max_length=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("usage", models.PositiveSmallIntegerField(help_text="Certificate usage")),
                ("selector", models.PositiveSmallIntegerField(help_text="Selector")),
                ("matching_type", models.PositiveSmallIntegerField(help_text="Matching type")),
                ("certificate_data", models.TextField(help_text="Certificate association data (hex)")),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="auth.group")),
                ("owner", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ("zone", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="manager.zone")),
            ],
            options={
                "verbose_name": "TLSA Record",
                "verbose_name_plural": "TLSA Records",
            },
        ),
        migrations.CreateModel(
            name="SRV",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "label",
                    models.CharField(
                        help_text="Record label (e.g., www, @, or subdomain)",
                        max_length=255,
                        validators=[manager.models.validate_rr_label],
                    ),
                ),
                ("ttl", models.PositiveIntegerField(default=3600, help_text="Time to live in seconds")),
                ("rrclass", models.CharField(choices=[("IN", "IN")], db_column="class", default="IN", max_length=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("priority", models.PositiveSmallIntegerField(help_text="Priority")),
                ("weight", models.PositiveSmallIntegerField(help_text="Weight")),
                ("port", models.PositiveIntegerField(help_text="Port number")),
                (
                    "value",
                    models.CharField(
                        help_text="Target hostname", max_length=255, validators=[manager.models.validate_dns_hostname]
                    ),
                ),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="auth.group")),
                ("owner", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ("zone", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="manager.zone")),
            ],
            options={
                "verbose_name": "SRV Record",
                "verbose_name_plural": "SRV Records",
                "ordering": ["label", "priority", "weight", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="SOA",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "name",
                    models.CharField(
                        default="@",
                        help_text="SOA record name (usually @)",
                        max_length=255,
                        validators=[manager.models.validate_dns_name],
                    ),
                ),
                ("rrclass", models.CharField(choices=[("IN", "IN")], db_column="class", default="IN", max_length=2)),
                ("ttl", models.PositiveIntegerField(default=3600, help_text="SOA record TTL in seconds")),
                (
                    "mname",
                    models.CharField(
                        help_text="Primary name server", max_length=255, validators=[manager.models.validate_dns_name]
                    ),
                ),
                (
                    "rname",
                    models.CharField(
                        help_text="Responsible person email (replace @ with .)",
                        max_length=255,
                        validators=[manager.models.validate_dns_name],
                    ),
                ),
                (
                    "serial",
                    models.PositiveBigIntegerField(
                        default=manager.models.generate_soa_serial, help_text="Zone serial number (YYYYMMDDNN format)"
                    ),
                ),
                ("refresh", models.PositiveIntegerField(default=86400, help_text="Refresh interval in seconds")),
                ("retry", models.PositiveIntegerField(default=7200, help_text="Retry interval in seconds")),
                ("expire", models.PositiveIntegerField(default=3600000, help_text="Expire time in seconds")),
                ("minimum", models.PositiveIntegerField(default=172800, help_text="Minimum TTL in seconds")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "zone",
                    models.OneToOneField(
                        help_text="Zone this SOA record belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="soa",
                        to="manager.zone",
                    ),
                ),
            ],
            options={
                "verbose_name": "SOA Record",
                "verbose_name_plural": "SOA Records",
            },
        ),
        migrations.CreateModel(
            name="PTR",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "label",
                    models.CharField(
                        help_text="Record label (e.g., www, @, or subdomain)",
                        max_length=255,
                        validators=[manager.models.validate_rr_label],
                    ),
                ),
                ("ttl", models.PositiveIntegerField(default=3600, help_text="Time to live in seconds")),
                ("rrclass", models.CharField(choices=[("IN", "IN")], db_column="class", default="IN", max_length=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "value",
                    models.CharField(
                        help_text="Target hostname", max_length=255, validators=[manager.models.validate_dns_hostname]
                    ),
                ),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="auth.group")),
                ("owner", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ("zone", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="manager.zone")),
            ],
            options={
                "verbose_name": "PTR Record",
                "verbose_name_plural": "PTR Records",
            },
        ),
        migrations.CreateModel(
            name="NS",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "label",
                    models.CharField(
                        help_text="Record label (e.g., www, @, or subdomain)",
                        max_length=255,
                        validators=[manager.models.validate_rr_label],
                    ),
                ),
                ("ttl", models.PositiveIntegerField(default=3600, help_text="Time to live in seconds")),
                ("rrclass", models.CharField(choices=[("IN", "IN")], db_column="class", default="IN", max_length=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "value",
                    models.CharField(
                        help_text="Name server hostname",
                        max_length=255,
                        validators=[manager.models.validate_dns_hostname],
                    ),
                ),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="auth.group")),
                ("owner", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ("zone", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="manager.zone")),
            ],
            options={
                "verbose_name": "NS Record",
                "verbose_name_plural": "NS Records",
            },
        ),
        migrations.CreateModel(
            name="MX",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "label",
                    models.CharField(
                        help_text="Record label (e.g., www, @, or subdomain)",
                        max_length=255,
                        validators=[manager.models.validate_rr_label],
                    ),
                ),
                ("ttl", models.PositiveIntegerField(default=3600, help_text="Time to live in seconds")),
                ("rrclass", models.CharField(choices=[("IN", "IN")], db_column="class", default="IN", max_length=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "priority",
                    models.PositiveSmallIntegerField(help_text="Priority (lower values have higher priority)"),
                ),
                (
                    "value",
                    models.CharField(
                        help_text="Mail server hostname",
                        max_length=255,
                        validators=[manager.models.validate_dns_hostname],
                    ),
                ),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="auth.group")),
                ("owner", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ("zone", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="manager.zone")),
            ],
            options={
                "verbose_name": "MX Record",
                "verbose_name_plural": "MX Records",
                "ordering": ["label", "priority", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="DS",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "label",
                    models.CharField(
                        help_text="Record label (e.g., www, @, or subdomain)",
                        max_length=255,
                        validators=[manager.models.validate_rr_label],
                    ),
                ),
                ("ttl", models.PositiveIntegerField(default=3600, help_text="Time to live in seconds")),
                ("rrclass", models.CharField(choices=[("IN", "IN")], db_column="class", default="IN", max_length=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("key_tag", models.PositiveIntegerField(help_text="Key tag")),
                ("algorithm", models.PositiveSmallIntegerField(help_text="Algorithm number")),
                ("digest_type", models.PositiveSmallIntegerField(help_text="Digest type")),
                ("digest", models.CharField(help_text="Digest value (hex)", max_length=255)),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="auth.group")),
                ("owner", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ("zone", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="manager.zone")),
            ],
            options={
                "verbose_name": "DS Record",
                "verbose_name_plural": "DS Records",
            },
        ),
        migrations.CreateModel(
            name="DNSKEY",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "label",
                    models.CharField(
                        help_text="Record label (e.g., www, @, or subdomain)",
                        max_length=255,
                        validators=[manager.models.validate_rr_label],
                    ),
                ),
                ("ttl", models.PositiveIntegerField(default=3600, help_text="Time to live in seconds")),
                ("rrclass", models.CharField(choices=[("IN", "IN")], db_column="class", default="IN", max_length=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("flags", models.PositiveIntegerField(help_text="Key flags")),
                ("protocol", models.PositiveSmallIntegerField(default=3, help_text="Protocol (always 3)")),
                ("algorithm", models.PositiveSmallIntegerField(help_text="Algorithm number")),
                ("public_key", models.TextField(help_text="Base64 encoded public key")),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="auth.group")),
                ("owner", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ("zone", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="manager.zone")),
            ],
            options={
                "verbose_name": "DNSKEY Record",
                "verbose_name_plural": "DNSKEY Records",
            },
        ),
        migrations.CreateModel(
            name="CNAME",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "label",
                    models.CharField(
                        help_text="Record label (e.g., www, @, or subdomain)",
                        max_length=255,
                        validators=[manager.models.validate_rr_label],
                    ),
                ),
                ("ttl", models.PositiveIntegerField(default=3600, help_text="Time to live in seconds")),
                ("rrclass", models.CharField(choices=[("IN", "IN")], db_column="class", default="IN", max_length=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "value",
                    models.CharField(
                        help_text="Target hostname", max_length=255, validators=[manager.models.validate_dns_hostname]
                    ),
                ),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="auth.group")),
                ("owner", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ("zone", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="manager.zone")),
            ],
            options={
                "verbose_name": "CNAME Record",
                "verbose_name_plural": "CNAME Records",
            },
        ),
        migrations.CreateModel(
            name="CAA",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "label",
                    models.CharField(
                        help_text="Record label (e.g., www, @, or subdomain)",
                        max_length=255,
                        validators=[manager.models.validate_rr_label],
                    ),
                ),
                ("ttl", models.PositiveIntegerField(default=3600, help_text="Time to live in seconds")),
                ("rrclass", models.CharField(choices=[("IN", "IN")], db_column="class", default="IN", max_length=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("flag", models.PositiveSmallIntegerField(default=0, help_text="CAA flag (usually 0)")),
                (
                    "tag",
                    models.CharField(
                        choices=[
                            ("issue", "issue"),
                            ("issuewild", "issuewild"),
                            ("iodef", "iodef"),
                            ("contactemail", "contactemail"),
                            ("contactphone", "contactphone"),
                        ],
                        help_text="CAA property tag",
                        max_length=20,
                    ),
                ),
                ("value", models.CharField(help_text="CAA property value", max_length=255)),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="auth.group")),
                ("owner", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ("zone", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="manager.zone")),
            ],
            options={
                "verbose_name": "CAA Record",
                "verbose_name_plural": "CAA Records",
            },
        ),
        migrations.CreateModel(
            name="AAAA",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "label",
                    models.CharField(
                        help_text="Record label (e.g., www, @, or subdomain)",
                        max_length=255,
                        validators=[manager.models.validate_rr_label],
                    ),
                ),
                ("ttl", models.PositiveIntegerField(default=3600, help_text="Time to live in seconds")),
                ("rrclass", models.CharField(choices=[("IN", "IN")], db_column="class", default="IN", max_length=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "value",
                    models.CharField(
                        help_text="IPv6 address", max_length=39, validators=[manager.models.validate_ipv6]
                    ),
                ),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="auth.group")),
                ("owner", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ("zone", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="manager.zone")),
            ],
            options={
                "verbose_name": "AAAA Record",
                "verbose_name_plural": "AAAA Records",
            },
        ),
        migrations.CreateModel(
            name="A",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "label",
                    models.CharField(
                        help_text="Record label (e.g., www, @, or subdomain)",
                        max_length=255,
                        validators=[manager.models.validate_rr_label],
                    ),
                ),
                ("ttl", models.PositiveIntegerField(default=3600, help_text="Time to live in seconds")),
                ("rrclass", models.CharField(choices=[("IN", "IN")], db_column="class", default="IN", max_length=2)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "value",
                    models.CharField(
                        help_text="IPv4 address", max_length=15, validators=[manager.models.validate_ipv4]
                    ),
                ),
                ("group", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="auth.group")),
                ("owner", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ("zone", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="manager.zone")),
            ],
            options={
                "verbose_name": "A Record",
                "verbose_name_plural": "A Records",
            },
        ),
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("timestamp", models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("DDNS", "DDNS Update"),
                            ("API", "REST API"),
                            ("ADMIN", "Admin Interface"),
                            ("SYSTEM", "System"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[("CREATE", "Create"), ("UPDATE", "Update"), ("DELETE", "Delete")], max_length=10
                    ),
                ),
                ("object_id", models.PositiveBigIntegerField()),
                ("changed_data", models.JSONField(help_text="Snapshot of the changed data")),
                ("description", models.TextField(blank=True)),
                (
                    "content_type",
                    models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="contenttypes.contenttype"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Audit Log Entry",
                "verbose_name_plural": "Audit Log Entries",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(fields=["-timestamp", "user"], name="manager_aud_timesta_720bee_idx"),
                    models.Index(fields=["content_type", "object_id"], name="manager_aud_content_bf31a4_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="SlaveOnlyZoneServerStatus",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "config_dirty",
                    models.BooleanField(default=False, help_text="Server configuration for this zone needs update"),
                ),
                (
                    "config_dirty_since",
                    models.DateTimeField(blank=True, help_text="When config was marked dirty", null=True),
                ),
                (
                    "last_sync_time",
                    models.DateTimeField(blank=True, help_text="Last successful synchronization time", null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "server",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="slave_only_zone_statuses",
                        to="manager.server",
                    ),
                ),
                (
                    "zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="server_statuses",
                        to="manager.slaveonlyzone",
                    ),
                ),
            ],
            options={
                "verbose_name": "Slave Only Zone Server Status",
                "verbose_name_plural": "Slave Only Zone Server Statuses",
                "unique_together": {("zone", "server")},
            },
        ),
        migrations.CreateModel(
            name="ZoneServerStatus",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "config_dirty",
                    models.BooleanField(default=False, help_text="Server configuration for this zone needs update"),
                ),
                (
                    "config_dirty_since",
                    models.DateTimeField(blank=True, help_text="When config was marked dirty", null=True),
                ),
                (
                    "last_sync_time",
                    models.DateTimeField(blank=True, help_text="Last successful synchronization time", null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "server",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="zone_statuses", to="manager.server"
                    ),
                ),
                (
                    "zone",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="server_statuses", to="manager.zone"
                    ),
                ),
            ],
            options={
                "verbose_name": "Zone Server Status",
                "verbose_name_plural": "Zone Server Statuses",
                "unique_together": {("zone", "server")},
            },
        ),
    ]

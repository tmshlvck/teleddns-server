"""
TeleDDNS Server - API Documentation Extensions
(C) 2015-2024 Tomas Hlavacek (tmshlvck@gmail.com)

This module provides extended documentation and schema customizations
for the API documentation generated by drf-spectacular.
"""

from drf_spectacular.extensions import OpenApiViewExtension
from drf_spectacular.utils import extend_schema, extend_schema_view, OpenApiParameter, OpenApiExample
from drf_spectacular.types import OpenApiTypes

# API Overview Documentation
API_DESCRIPTION = """
# TeleDDNS Server API

## Overview

The TeleDDNS Server API provides programmatic access to manage DNS zones, resource records,
and server configurations. This RESTful API supports full CRUD operations for DNS management
with built-in authentication, authorization, and audit logging.

## Authentication

The API uses Token Authentication. To authenticate requests:

1. Obtain your API token from `/api/token/` endpoint
2. Include the token in the Authorization header: `Authorization: Token YOUR_TOKEN_HERE`

## Base URL

All API endpoints are prefixed with `/api/`

## Main Features

- **Zone Management**: Create, update, delete DNS zones
- **Resource Records**: Manage A, AAAA, CNAME, MX, NS, PTR, SRV, TXT, CAA, DS, DNSKEY, TLSA records
- **Server Configuration**: Manage DNS server backends
- **Slave-Only Zones**: Support for zones with external master servers
- **Audit Logging**: Track all changes made through the API
- **Dynamic DNS**: DDNS updates via separate endpoint

## Response Format

All responses are in JSON format. Successful responses include the requested data.
Error responses include an error message and appropriate HTTP status code.

## Pagination

List endpoints support pagination with the following query parameters:
- `page`: Page number (default: 1)
- `page_size`: Items per page (default: 100, max: 1000)

## Filtering and Ordering

Most list endpoints support:
- `search`: Search in relevant fields
- `ordering`: Sort by field (prefix with `-` for descending)

## Rate Limiting

API requests are subject to rate limiting. Current limits:
- Authenticated users: 1000 requests/hour
- DDNS updates: 60 requests/hour per IP

## Status Codes

- `200 OK`: Successful GET, PUT
- `201 Created`: Successful POST
- `204 No Content`: Successful DELETE
- `400 Bad Request`: Invalid request data
- `401 Unauthorized`: Missing or invalid authentication
- `403 Forbidden`: Insufficient permissions
- `404 Not Found`: Resource not found
- `500 Internal Server Error`: Server error
"""

# Zone endpoint examples
ZONE_EXAMPLES = {
    'create': OpenApiExample(
        'Create Zone Example',
        value={
            'origin': 'example.com.',
            'owner_id': 1,
            'group_id': 1,
            'master_server': 1,
            'slave_servers': [2, 3]
        },
        request_only=True,
    ),
    'response': OpenApiExample(
        'Zone Response Example',
        value={
            'id': 1,
            'origin': 'example.com.',
            'owner': {
                'id': 1,
                'username': 'admin',
                'email': 'admin@example.com'
            },
            'group': {
                'id': 1,
                'name': 'dns-admins'
            },
            'master_server': 1,
            'master_server_name': 'ns1.example.com',
            'slave_servers': [2, 3],
            'slave_servers_names': ['ns2.example.com', 'ns3.example.com'],
            'is_dirty': False,
            'created_at': '2024-01-01T00:00:00Z',
            'updated_at': '2024-01-01T00:00:00Z'
        },
        response_only=True,
    )
}

# Resource record examples
A_RECORD_EXAMPLE = OpenApiExample(
    'A Record Example',
    value={
        'zone': 1,
        'label': 'www',
        'ttl': 3600,
        'value': '192.168.1.100'
    }
)

AAAA_RECORD_EXAMPLE = OpenApiExample(
    'AAAA Record Example',
    value={
        'zone': 1,
        'label': 'www',
        'ttl': 3600,
        'value': '2001:db8::1'
    }
)

MX_RECORD_EXAMPLE = OpenApiExample(
    'MX Record Example',
    value={
        'zone': 1,
        'label': '@',
        'ttl': 3600,
        'priority': 10,
        'value': 'mail.example.com.'
    }
)

CNAME_RECORD_EXAMPLE = OpenApiExample(
    'CNAME Record Example',
    value={
        'zone': 1,
        'label': 'mail',
        'ttl': 3600,
        'value': 'mail.google.com.'
    }
)

SRV_RECORD_EXAMPLE = OpenApiExample(
    'SRV Record Example',
    value={
        'zone': 1,
        'label': '_sip._tcp',
        'ttl': 3600,
        'priority': 10,
        'weight': 60,
        'port': 5060,
        'value': 'sip.example.com.'
    }
)

TXT_RECORD_EXAMPLE = OpenApiExample(
    'TXT Record Example',
    value={
        'zone': 1,
        'label': '@',
        'ttl': 3600,
        'value': 'v=spf1 include:_spf.google.com ~all'
    }
)

# Common query parameters
PAGINATION_PARAMETERS = [
    OpenApiParameter(
        name='page',
        description='Page number for pagination',
        required=False,
        type=OpenApiTypes.INT,
        location=OpenApiParameter.QUERY,
    ),
    OpenApiParameter(
        name='page_size',
        description='Number of results per page (max 1000)',
        required=False,
        type=OpenApiTypes.INT,
        location=OpenApiParameter.QUERY,
    ),
]

SEARCH_PARAMETER = OpenApiParameter(
    name='search',
    description='Search term to filter results',
    required=False,
    type=OpenApiTypes.STR,
    location=OpenApiParameter.QUERY,
)

ORDERING_PARAMETER = OpenApiParameter(
    name='ordering',
    description='Field to order results by (prefix with - for descending)',
    required=False,
    type=OpenApiTypes.STR,
    location=OpenApiParameter.QUERY,
)

# Schema extensions for better documentation
zone_schema_extensions = {
    'list': extend_schema(
        summary='List DNS zones',
        description='Returns a paginated list of DNS zones visible to the authenticated user.',
        parameters=PAGINATION_PARAMETERS + [SEARCH_PARAMETER, ORDERING_PARAMETER],
        tags=['Zones'],
    ),
    'create': extend_schema(
        summary='Create a new DNS zone',
        description='Creates a new DNS zone with the specified origin and configuration.',
        examples=[ZONE_EXAMPLES['create']],
        tags=['Zones'],
    ),
    'retrieve': extend_schema(
        summary='Get zone details',
        description='Returns detailed information about a specific DNS zone.',
        responses={200: ZONE_EXAMPLES['response']},
        tags=['Zones'],
    ),
    'update': extend_schema(
        summary='Update a DNS zone',
        description='Updates the specified DNS zone configuration.',
        tags=['Zones'],
    ),
    'partial_update': extend_schema(
        summary='Partially update a DNS zone',
        description='Updates specific fields of a DNS zone.',
        tags=['Zones'],
    ),
    'destroy': extend_schema(
        summary='Delete a DNS zone',
        description='Deletes a DNS zone and all its associated resource records.',
        tags=['Zones'],
    ),
}

# Resource record schema extensions
rr_schema_extensions = {
    'list': extend_schema(
        summary='List {model_name} records',
        description='Returns a paginated list of {model_name} records visible to the authenticated user.',
        parameters=PAGINATION_PARAMETERS + [SEARCH_PARAMETER, ORDERING_PARAMETER],
        tags=['Resource Records'],
    ),
    'create': extend_schema(
        summary='Create a new {model_name} record',
        description='Creates a new {model_name} record in the specified zone.',
        tags=['Resource Records'],
    ),
    'retrieve': extend_schema(
        summary='Get {model_name} record details',
        description='Returns detailed information about a specific {model_name} record.',
        tags=['Resource Records'],
    ),
    'update': extend_schema(
        summary='Update a {model_name} record',
        description='Updates the specified {model_name} record.',
        tags=['Resource Records'],
    ),
    'partial_update': extend_schema(
        summary='Partially update a {model_name} record',
        description='Updates specific fields of a {model_name} record.',
        tags=['Resource Records'],
    ),
    'destroy': extend_schema(
        summary='Delete a {model_name} record',
        description='Deletes a {model_name} record from its zone.',
        tags=['Resource Records'],
    ),
}

# Custom action schema extensions
sync_zone_schema = extend_schema(
    summary='Synchronize zone to DNS servers',
    description="""
    Pushes the zone configuration and records to the configured DNS servers.
    This action is required after making changes to propagate them to the actual DNS infrastructure.

    The zone must be marked as 'dirty' to be synchronized, unless forced.
    """,
    request=None,
    responses={
        200: OpenApiExample(
            'Success',
            value={'status': 'success', 'message': 'Zone synchronized successfully'}
        ),
        403: OpenApiExample(
            'Forbidden',
            value={'error': 'You do not have permission to sync this zone'}
        ),
        400: OpenApiExample(
            'Sync Failed',
            value={'status': 'error', 'errors': ['Connection failed', 'Invalid zone data']}
        ),
    },
    tags=['Zones'],
)

validate_zone_schema = extend_schema(
    summary='Validate zone configuration',
    description="""
    Validates the zone configuration and all its resource records.
    Returns a list of any validation errors found.
    """,
    request=None,
    responses={
        200: OpenApiExample(
            'Validation Result',
            value={
                'valid': True,
                'errors': [],
                'warnings': ['No MX records found']
            }
        ),
    },
    tags=['Zones'],
)

check_zone_schema = extend_schema(
    summary='Check zone on DNS server',
    description="""
    Queries the actual DNS server to verify the zone is properly configured
    and returns the current state.
    """,
    request=None,
    responses={
        200: OpenApiExample(
            'Zone Status',
            value={
                'status': 'ok',
                'serial': 2024010101,
                'records': 25,
                'last_check': '2024-01-01T12:00:00Z'
            }
        ),
    },
    tags=['Zones'],
)

increment_serial_schema = extend_schema(
    summary='Increment zone serial number',
    description="""
    Manually increments the zone's SOA serial number.
    This is usually done automatically when records change.
    """,
    request=None,
    responses={
        200: OpenApiExample(
            'Serial Incremented',
            value={
                'status': 'success',
                'new_serial': 2024010102
            }
        ),
    },
    tags=['Zones'],
)

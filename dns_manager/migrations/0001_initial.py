# Generated by Django 5.2.6 on 2025-09-11 13:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('totp_secret', models.CharField(blank=True, max_length=32, null=True)),
                ('totp_enabled', models.BooleanField(default=False)),
                ('totp_backup_codes', models.TextField(blank=True, null=True)),
                ('sso_provider', models.CharField(blank=True, max_length=50, null=True)),
                ('sso_subject_id', models.CharField(blank=True, max_length=255, null=True)),
                ('sso_enabled', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MasterZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('origin', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(message='Origin must be a valid DNS name ending with a dot', regex='^((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,1024}(?<!-))\\.$')])),
                ('soa_name', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(message='SOA name must be @ or a valid DNS name', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,1024}(?<!-)))$')])),
                ('soa_class', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('soa_ttl', models.PositiveIntegerField(default=3600)),
                ('soa_mname', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(message='SOA MNAME must be @ or a valid DNS name', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,1024}(?<!-)))$')])),
                ('soa_rname', models.CharField(max_length=255, validators=[django.core.validators.RegexValidator(message='SOA RNAME must be @ or a valid DNS name', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,1024}(?<!-)))$')])),
                ('soa_serial', models.PositiveIntegerField()),
                ('soa_refresh', models.PositiveIntegerField(default=3600)),
                ('soa_retry', models.PositiveIntegerField(default=1800)),
                ('soa_expire', models.PositiveIntegerField(default=1209600)),
                ('soa_minimum', models.PositiveIntegerField(default=86400)),
                ('content_dirty', models.BooleanField(default=True)),
                ('last_content_sync', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group_zones', to='dns_manager.group')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_zones', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GroupLabelAuthorization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label_pattern', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='label_authorizations', to='dns_manager.group')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_manager.masterzone')),
            ],
            options={
                'db_table': 'grouplabelauthorization',
            },
        ),
        migrations.CreateModel(
            name='DS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(message='Label must be @ or a valid DNS label', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,63}(?<!-)))$')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('rrclass', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('key_tag', models.PositiveSmallIntegerField()),
                ('algorithm', models.PositiveSmallIntegerField()),
                ('digest_type', models.PositiveSmallIntegerField()),
                ('digest', models.CharField(max_length=255)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_records', to='dns_manager.masterzone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DNSKEY',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(message='Label must be @ or a valid DNS label', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,63}(?<!-)))$')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('rrclass', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('flags', models.PositiveSmallIntegerField()),
                ('protocol', models.PositiveSmallIntegerField(default=3)),
                ('algorithm', models.PositiveSmallIntegerField()),
                ('public_key', models.TextField()),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_records', to='dns_manager.masterzone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CNAME',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(message='Label must be @ or a valid DNS label', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,63}(?<!-)))$')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('rrclass', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_records', to='dns_manager.masterzone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CAA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(message='Label must be @ or a valid DNS label', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,63}(?<!-)))$')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('rrclass', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('flag', models.PositiveSmallIntegerField()),
                ('tag', models.CharField(choices=[('issue', 'Issue'), ('issuewild', 'Issue Wild'), ('iodef', 'IODEF'), ('contactemail', 'Contact Email'), ('contactphone', 'Contact Phone')], max_length=20)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_records', to='dns_manager.masterzone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AAAA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(message='Label must be @ or a valid DNS label', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,63}(?<!-)))$')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('rrclass', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_records', to='dns_manager.masterzone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='A',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(message='Label must be @ or a valid DNS label', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,63}(?<!-)))$')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('rrclass', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_records', to='dns_manager.masterzone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MX',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(message='Label must be @ or a valid DNS label', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,63}(?<!-)))$')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('rrclass', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('priority', models.PositiveSmallIntegerField()),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_records', to='dns_manager.masterzone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NAPTR',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(message='Label must be @ or a valid DNS label', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,63}(?<!-)))$')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('rrclass', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('order', models.PositiveSmallIntegerField()),
                ('preference', models.PositiveSmallIntegerField()),
                ('flags', models.CharField(max_length=10)),
                ('service', models.CharField(max_length=255)),
                ('regexp', models.CharField(max_length=255)),
                ('replacement', models.CharField(max_length=255)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_records', to='dns_manager.masterzone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(message='Label must be @ or a valid DNS label', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,63}(?<!-)))$')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('rrclass', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_records', to='dns_manager.masterzone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PTR',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(message='Label must be @ or a valid DNS label', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,63}(?<!-)))$')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('rrclass', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_records', to='dns_manager.masterzone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('api_url', models.URLField()),
                ('api_key', models.CharField(max_length=255)),
                ('master_template', models.TextField()),
                ('slave_template', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('last_config_sync', models.DateTimeField(blank=True, null=True)),
                ('config_dirty', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group_servers', to='dns_manager.group')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_servers', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='masterzone',
            name='master_server',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='master_zones', to='dns_manager.server'),
        ),
        migrations.CreateModel(
            name='SlaveZoneServer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_manager.server')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_manager.masterzone')),
            ],
            options={
                'db_table': 'slavezoneserver',
                'unique_together': {('zone', 'server')},
            },
        ),
        migrations.AddField(
            model_name='masterzone',
            name='slave_servers',
            field=models.ManyToManyField(related_name='slave_zones', through='dns_manager.SlaveZoneServer', to='dns_manager.server'),
        ),
        migrations.CreateModel(
            name='SRV',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(message='Label must be @ or a valid DNS label', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,63}(?<!-)))$')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('rrclass', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('priority', models.PositiveSmallIntegerField()),
                ('weight', models.PositiveSmallIntegerField()),
                ('port', models.PositiveSmallIntegerField()),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_records', to='dns_manager.masterzone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SSHFP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(message='Label must be @ or a valid DNS label', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,63}(?<!-)))$')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('rrclass', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('algorithm', models.PositiveSmallIntegerField(choices=[(1, 'RSA'), (2, 'DSA'), (3, 'ECDSA'), (4, 'Ed25519')])),
                ('hash_type', models.PositiveSmallIntegerField(choices=[(1, 'SHA-1'), (2, 'SHA-256')])),
                ('fingerprint', models.CharField(max_length=255)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_records', to='dns_manager.masterzone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TLSA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(message='Label must be @ or a valid DNS label', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,63}(?<!-)))$')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('rrclass', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('cert_usage', models.PositiveSmallIntegerField(choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3')])),
                ('selector', models.PositiveSmallIntegerField(choices=[(0, '0'), (1, '1')])),
                ('matching_type', models.PositiveSmallIntegerField(choices=[(0, '0'), (1, '1'), (2, '2')])),
                ('cert_data', models.TextField()),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_records', to='dns_manager.masterzone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TXT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=63, validators=[django.core.validators.RegexValidator(message='Label must be @ or a valid DNS label', regex='^(@|((?![0-9]+$)(?!-)[a-zA-Z0-9\\.-]{,63}(?<!-)))$')])),
                ('ttl', models.PositiveIntegerField(default=3600)),
                ('rrclass', models.CharField(choices=[('IN', 'Internet')], default='IN', max_length=10)),
                ('value', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_records', to='dns_manager.masterzone')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_manager.group')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'usergroup',
                'unique_together': {('user', 'group')},
            },
        ),
        migrations.AddField(
            model_name='group',
            name='users',
            field=models.ManyToManyField(related_name='user_groups', through='dns_manager.UserGroup', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserLabelAuthorization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label_pattern', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='label_authorizations', to=settings.AUTH_USER_MODEL)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dns_manager.masterzone')),
            ],
            options={
                'db_table': 'userlabelauthorization',
            },
        ),
        migrations.CreateModel(
            name='UserPassKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credential_id', models.CharField(max_length=255, unique=True)),
                ('public_key', models.TextField()),
                ('sign_count', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(blank=True, default='', max_length=255)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='passkeys', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'userpasskey',
            },
        ),
        migrations.CreateModel(
            name='UserToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_hash', models.CharField(max_length=64, unique=True)),
                ('description', models.CharField(blank=True, default='', max_length=255)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('scopes', models.CharField(default='*', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_update_metadata', models.TextField(blank=True, default='')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='api_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'usertoken',
            },
        ),
    ]

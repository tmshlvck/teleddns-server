"""
Django settings for teleddns_server project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Initialize environ
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    ALLOWED_HOSTS=(list, []),
    DATABASE_URL=(str, 'sqlite:///db.sqlite3'),
    SECRET_KEY=(str, 'django-insecure-CHANGE-THIS-IN-PRODUCTION'),
    FORCE_SCRIPT_NAME=(str, None),
)

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env('ALLOWED_HOSTS')

# Support for mounting under a subdirectory (e.g., /ddns)
FORCE_SCRIPT_NAME = env('FORCE_SCRIPT_NAME', default=None)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'drf_spectacular',

    # Local apps
    'manager',
    'ddns',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'manager.signals.AuditLogMiddleware',  # Custom audit logging middleware
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if DEBUG:
    INSTALLED_APPS += ['debug_toolbar']
    MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')
    INTERNAL_IPS = ['127.0.0.1', 'localhost']

ROOT_URLCONF = 'teleddns_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'teleddns_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': env.db()
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
# In Docker, static files go to /data/static, otherwise local staticfiles
STATIC_ROOT = '/data/static' if os.path.exists('/data') else BASE_DIR / 'staticfiles'

# Media files
MEDIA_URL = 'media/'
# In Docker, media files go to /data/media, otherwise local media
MEDIA_ROOT = '/data/media' if os.path.exists('/data') else BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework settings
# API Authentication Configuration
# By default, both Token and Session auth are enabled:
# - Token auth: For programmatic API access (recommended for production)
# - Session auth: For browsable API and Swagger UI when logged into Django admin
# Set API_DISABLE_SESSION_AUTH=True to use token-only authentication
API_DISABLE_SESSION_AUTH = env.bool('API_DISABLE_SESSION_AUTH', default=False)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ] + ([] if API_DISABLE_SESSION_AUTH else [
        'rest_framework.authentication.SessionAuthentication',
    ]),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# DRF-Spectacular settings for API documentation
SPECTACULAR_SETTINGS = {
    'TITLE': 'TeleDDNS Server API',
    'DESCRIPTION': 'Dynamic DNS Server Management API',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
    },
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': '/api/',
    # Authentication settings - define which auth methods are required
    'SECURITY': [
        {'tokenAuth': []} if API_DISABLE_SESSION_AUTH else {'tokenAuth': [], 'sessionAuth': []},
    ],
    'AUTHENTICATION_WHITELIST': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'APPEND_COMPONENTS': {
        'securitySchemes': {
            'tokenAuth': {
                'type': 'apiKey',
                'in': 'header',
                'name': 'Authorization',
                'description': 'Token authentication. Format: "Token YOUR_TOKEN_HERE"',
            },
            'sessionAuth': {
                'type': 'apiKey',
                'in': 'cookie',
                'name': 'sessionid',
                'description': 'Django session authentication (for browsable API)',
            },
        }
    },
}

# TeleDDNS specific settings
DDNS_DEFAULT_TTL = env.int('DDNS_DEFAULT_TTL', default=3600)
DDNS_RR_TTL = env.int('DDNS_RR_TTL', default=60)

# Background sync thread settings
SYNC_THREAD_INTERVAL = env.int('SYNC_THREAD_INTERVAL', default=60)  # seconds
SYNC_THREAD_MAX_BACKOFF_SECONDS = env.int('SYNC_THREAD_MAX_BACKOFF_SECONDS', default=86400)  # 24 hours
SYNC_THREAD_BACKOFF_BASE = env.int('SYNC_THREAD_BACKOFF_BASE', default=2)

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': '/data/logs/teleddns.log' if os.path.exists('/data') else BASE_DIR / 'logs' / 'teleddns.log',
            'maxBytes': 1024 * 1024 * 15,  # 15MB
            'backupCount': 10,
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': env('DJANGO_LOG_LEVEL', default='INFO'),
            'propagate': False,
        },
        'ddns': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'manager': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Create logs directory if it doesn't exist
if os.path.exists('/data'):
    os.makedirs('/data/logs', exist_ok=True)
else:
    os.makedirs(BASE_DIR / 'logs', exist_ok=True)
